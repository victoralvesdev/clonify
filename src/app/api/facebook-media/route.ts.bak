import { NextResponse } from 'next/server';
import puppeteer from 'puppeteer';

export async function POST(request: Request) {
  try {
    const { adId, adSnapshotUrl } = await request.json();

    if (!adSnapshotUrl) {
      return NextResponse.json({ error: 'URL do anúncio não fornecida' }, { status: 400 });
    }

    console.log(`Iniciando busca de mídia para anúncio ${adId}:`, adSnapshotUrl);

    // Iniciar o Puppeteer
    const browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-web-security',
        '--disable-features=IsolateOrigins,site-per-process',
        '--disable-site-isolation-trials'
      ]
    });

    try {
      const page = await browser.newPage();

      // Configurar viewport
      await page.setViewport({ width: 1200, height: 800 });

      // Habilitar logs do console da página
      page.on('console', msg => console.log('Console da página:', msg.text()));

      // Habilitar logs de requisição
      page.on('request', request => {
        console.log('Requisição:', request.url());
      });

      // Habilitar logs de resposta
      page.on('response', response => {
        const url = response.url();
        if (url.includes('.jpg') || url.includes('.png') || url.includes('.gif') || url.includes('.webp')) {
          console.log('Resposta de imagem:', url, response.status());
        }
      });

      console.log('Navegando para a página do anúncio...');
      
      // Navegar até a página do anúncio com timeout maior
      await page.goto(adSnapshotUrl, { 
        waitUntil: 'networkidle0',
        timeout: 60000
      });

      console.log('Página carregada, aguardando renderização...');

      // Aguardar um pouco mais para garantir que o conteúdo dinâmico seja carregado
      await new Promise(resolve => setTimeout(resolve, 5000));

      // Tirar screenshot para debug
      await page.screenshot({ path: `debug-${adId}.png` });

      console.log('Buscando imagens...');

      // Extrair todas as imagens relevantes usando múltiplos seletores
      const mediaUrls = await page.evaluate(() => {
        const images = new Set();
        
        // Função para adicionar imagem se for válida
        const addImage = (img: HTMLImageElement) => {
          const src = img.src;
          console.log('Imagem encontrada:', src);
          if (src && src.startsWith('http') && !src.includes('data:image') && !src.includes('hsts-pixel.gif')) {
            images.add({
              url: src,
              alt: img.alt || '',
              width: img.width || img.naturalWidth,
              height: img.height || img.naturalHeight
            });
          }
        };

        // Buscar todas as imagens
        document.querySelectorAll('img').forEach(img => {
          console.log('Processando imagem:', img.src);
          addImage(img as HTMLImageElement);
        });

        // Buscar imagens em backgrounds
        document.querySelectorAll('*').forEach(el => {
          const style = window.getComputedStyle(el);
          const bgImage = style.backgroundImage;
          if (bgImage && bgImage !== 'none') {
            console.log('Background image encontrada:', bgImage);
            const url = bgImage.slice(4, -1).replace(/['"]/g, '');
            if (url.startsWith('http') && !url.includes('hsts-pixel.gif')) {
              images.add({
                url: url,
                alt: 'background-image',
                width: el.clientWidth,
                height: el.clientHeight
              });
            }
          }
        });

        // Buscar imagens em meta tags
        document.querySelectorAll('meta[property="og:image"], meta[name="twitter:image"]').forEach(meta => {
          const url = (meta as HTMLMetaElement).content;
          console.log('Meta image encontrada:', url);
          if (url && url.startsWith('http') && !url.includes('hsts-pixel.gif')) {
            images.add({
              url: url,
              alt: 'meta-image',
              width: 0,
              height: 0
            });
          }
        });

        return Array.from(images);
      });

      console.log(`Encontradas ${mediaUrls.length} imagens no anúncio ${adId}:`, mediaUrls);

      // Extrair vídeos
      const videoUrls = await page.evaluate(() => {
        const videos = new Set();
        
        // Buscar em tags de vídeo
        document.querySelectorAll('video source').forEach(source => {
          const src = source.getAttribute('src');
          console.log('Video source encontrado:', src);
          if (src && src.startsWith('http')) {
            videos.add({
              url: src,
              type: source.getAttribute('type') || ''
            });
          }
        });

        // Buscar em iframes (para vídeos incorporados)
        document.querySelectorAll('iframe').forEach(iframe => {
          const src = iframe.getAttribute('src');
          console.log('Iframe encontrado:', src);
          if (src && (src.includes('youtube.com') || src.includes('facebook.com/video'))) {
            videos.add({
              url: src,
              type: 'iframe'
            });
          }
        });

        // Buscar vídeos em meta tags
        document.querySelectorAll('meta[property="og:video"], meta[name="twitter:player"]').forEach(meta => {
          const url = (meta as HTMLMetaElement).content;
          console.log('Meta video encontrado:', url);
          if (url && url.startsWith('http')) {
            videos.add({
              url: url,
              type: 'meta-video'
            });
          }
        });

        return Array.from(videos);
      });

      console.log(`Encontrados ${videoUrls.length} vídeos no anúncio ${adId}:`, videoUrls);

      // Filtrar e ordenar as imagens por tamanho
      const filteredImages = mediaUrls
        .filter((img: any) => {
          // Remover imagens muito pequenas ou ícones
          const isValid = (img.width > 100 && img.height > 100) || !img.width;
          console.log('Filtrando imagem:', img.url, isValid ? 'aceita' : 'rejeitada');
          return isValid;
        })
        .sort((a: any, b: any) => {
          // Ordenar por tamanho, maiores primeiro
          const aSize = a.width * a.height || 0;
          const bSize = b.width * b.height || 0;
          return bSize - aSize;
        });

      console.log('Imagens filtradas:', filteredImages);

      return NextResponse.json({
        success: true,
        adId,
        media: {
          images: filteredImages,
          videos: videoUrls
        }
      });

    } finally {
      await browser.close();
    }

  } catch (error) {
    console.error('Erro ao buscar mídia:', error);
    return NextResponse.json(
      { error: 'Erro ao buscar mídia do anúncio' },
      { status: 500 }
    );
  }
} 